# -*- encoding: utf-8 -*-
"""
Copyright (c) 2019 - present AppSeed.us
"""

# import blueprint
from flask import render_template, redirect, url_for, request, jsonify, flash, blueprint
from flask_login import login_required, current_user
# from app import login_manager
from jinja2 import TemplateNotFound
import json
from pydub import AudioSegment
import librosa
from werkzeug.utils import secure_filename
import requests
import pandas as pd
import os

# from run import app


@blueprint.route('/index')
@login_required
def index():
    time = 25
    return render_template('file_upload.html', time=time)
    # return render_template('index.html', segment='index')

@blueprint.route('/<template>')
@login_required
def route_template(template):

    try:

        if not template.endswith( '.html' ):
            template += '.html'

        # Detect the current page
        segment = get_segment( request )

        # Serve the file (if exists) from app/templates/FILE.html
        return render_template( template, segment=segment )

    except TemplateNotFound:
        return render_template('page-404.html'), 404
    
    except:
        return render_template('page-500.html'), 500

# Helper - Extract current page name from request 
def get_segment( request ): 

    try:

        segment = request.path.split('/')[-1]

        if segment == '':
            segment = 'index'

        return segment    

    except:
        return None  


@blueprint.route('/file')
@login_required
def file():
    time = 25
    return render_template('file_upload.html', time = time)


"""
    Route for Pipeline processing
"""
@blueprint.route('/process', methods=['GET', 'POST'])
def process():
    # os.remove(r'D:/QasimAli-DSE/master/Files/uploads')
    if request.method == "POST":
        print("FORM DATA RECEIVED")

        if "file" not in request.files:
            return redirect(request.url)

        file = request.files["file"]
        if file.filename == "":
            return redirect(request.url)

        if file:
            print(file.filename)
            filename = secure_filename(file.filename)
            file.save(os.path.join('UPLOAD_FOLDER', filename))
            flash("File processing can take approx. 20 minutes")
            import Pipeline
            df,ovl,ovl1,silperc,specperc,ovlperc, speaker_cn, dur, diff,l1,l11,l2,l22, speak_A, speak_B,ang,hap,neu,sad,angry1,happy1,neutral1,sad1,A_ang_cn,A_hap_cn,A_sad_cn,A_neu_cn,B_ang_cn,B_hap_cn,B_sad_cn,B_neu_cn = Pipeline.main()
            two = df['Total_Speech_Time']
            three = df['Silence_Duration']
            four = df['Max_Silence_Duration']
            five = df['Total_Overlap_Duration']
            six = df['Max_Overlap_Duration']
            # speaker_a_E = df['Speaker_A_E']
            # speaker_b_E = df['Speaker_b_E']

            values = ovl
            values1 = ovl1
            legend = 'Overlap'
            labels = ovl
            labels1 = ovl1
            tot_ovl = str(list(five))[1:-1]
            tot_sil = str(list(three))[1:-1]
            tot_spk = str(list(two))[1:-1]

            speak_a_s = l1
            speak_a_e = l11
            speak_b_s = l2
            speak_b_e = l22
            print(A_ang_cn)

            return render_template('file_upload.html', segment='file',
                                   two=str(list(two))[1:-1], three=str(list(three))[1:-1], four=str(list(four))[1:-1],
                                   five=str(list(five))[1:-1], six=str(list(six))[1:-1],values=values, labels=labels,
                                   values1=values1, labels1=labels1, legend=legend, silperc=silperc, specperc = specperc,
                                   ovlperc= ovlperc, tot_spk=tot_spk, tot_ovl = tot_ovl, tot_sil = tot_sil, speaker_cn = 2, dur = round(dur), diff = diff,
                                   hap = round(hap), sad = round(sad), ang = round(ang), neu = round(neu),angry1 = round(angry1),
                                   sad1 = round(sad1), neutral1=round(neutral1), happy1=round(happy1),
                                   speak_A = speak_A, speak_B = speak_B,a_ang = A_ang_cn,b_ang = B_ang_cn,a_hap = A_hap_cn
                                   ,b_hap = B_hap_cn,a_sad = A_sad_cn,b_sad = B_sad_cn,a_neu = A_neu_cn,b_neu = B_neu_cn)


# Test blueprint
@blueprint.route('/test',methods=['GET','POST'])
def test():
    ovl_st = [1, 3, 26, 27, 27, 37, 155, 159, 161, 184, 185, 186, 195, 317, 319, 342, 343, 344, 353, 471]
    ovl_en = [2, 3, 26, 27, 29, 37, 155, 160, 161, 185, 185, 187, 196, 318, 319, 343, 344, 346, 354, 472]
    diff = [0.8218124999999998, 0.14175000000000004, 0.524812500000003, 0.26493750000000205, 1.6115625000000051, 0.7003125000000026, 0.23118750000000432, 0.9382500000000107, 0.18562500000001592, 0.5349374999999839, 0.36112499999998704, 1.680749999999989, 0.6058125000000132, 0.9180000000000064, 0.12825000000009368, 0.55012499999998, 0.28518750000000637, 1.6250625000000127, 0.7036875000000009, 0.21600000000000819]
    sp_a_st = [0.65984375, 25.82384375, 36.10915625, 41.75890625, 65.23878124999999, 70.41096875, 72.12884374999999, 73.57165624999999, 80.98990624999999, 101.38165624999999, 104.16096875, 148.42409375, 153.03940624999998, 154.35734374999998, 158.97603125, 184.06746875, 194.34096875, 199.98734374999998, 223.47228124999998, 228.64784375, 230.36571874999998, 231.79840625, 239.21496875, 259.60840625000003, 262.38940625, 306.65253125000004, 311.26278125, 312.58240624999996, 317.21121874999994, 342.28915625, 352.56434375000003, 358.21915624999997, 381.70409374999997, 386.86953125, 388.59415624999997, 390.02684375, 397.45015624999996, 417.83853124999996, 420.61615625, 464.87759374999996, 469.49290625000003, 470.80915625]
    sp_a_en = [2.76584375, 29.85696875, 37.76628125, 42.72078125, 65.72140625, 70.60334375, 72.64859375, 74.09984374999999, 83.90759374999999, 103.77621875, 107.68446875000001, 151.94590624999998, 153.85784375, 155.92165624999998, 160.98078124999998, 188.07865625, 195.99134375, 200.94753125, 223.94984374999999, 228.80984375, 230.87028125, 232.33503125, 242.13603125, 262.00465625000004, 265.91628125, 310.16590625000003, 312.07446874999994, 314.13153124999997, 319.22440625, 346.31215625000004, 354.22484375, 359.18440624999994, 382.17828124999994, 387.59346874999994, 389.09028125, 390.55671874999996, 400.36446875, 420.23140624999996, 424.14134375000003, 468.39603124999996, 470.31471875, 472.39034374999994]
    sp_b_st = [3.60284375, 11.24890625, 16.41940625, 18.942218750000002, 30.70409375, 38.78721875, 44.81159375, 49.82346875, 52.76309375, 54.51640625, 57.31934375, 59.01359375, 60.528968750000004, 62.05615625, 65.72140625, 67.44434375, 70.60334375, 85.60184375, 90.86346875000001, 95.60196875, 108.75771875000001, 113.73584374999999, 121.12371875, 126.87809375, 135.70709374999998, 145.16046875, 161.82790624999998, 169.47396874999998, 174.66978125, 177.17403124999998, 188.93421874999999, 197.01228125, 203.04846874999998, 208.05696874999998, 210.99659375, 212.74484375, 215.54778124999999, 217.23865625, 218.75571875, 220.28628125, 223.94984374999999, 225.67109374999998, 228.80984375, 243.83028124999998, 249.10878125, 253.83040624999998, 266.98109375, 271.96765625, 279.35215625, 285.10821875, 293.93384374999994, 303.38384375, 320.05465625, 327.70746875, 332.89821874999996, 335.39909375, 347.16265624999994, 355.23903125000004, 361.27521875, 366.36978124999996, 370.97496875, 373.77453125, 375.47046875, 376.98415624999996, 378.51134375000004, 382.17828124999994, 383.90121875, 402.05703125, 407.33721875000003, 412.05715624999993, 425.04415625, 430.20115624999994, 437.58565624999994, 443.33328125, 452.16228125, 461.61059375]
    sp_b_en = [10.50978125, 15.54190625, 18.586156250000002, 22.006718749999997, 32.08109375, 40.39540625, 49.437031250000004, 52.54709375, 53.61696875, 55.64871875, 57.67203125, 59.59071875, 60.950843750000004, 62.958968750000004, 66.01503124999999, 68.41971874999999, 71.13659375, 90.61034375, 93.91109374999999, 99.58109375000001, 113.50296875000001, 120.35253125, 123.84565624999999, 130.05059375, 140.38653125, 146.40415625, 168.75846875, 173.76190624999998, 176.81121875, 180.25034374999998, 190.32640625, 198.62890625, 207.63003125, 210.81096875, 211.86734375, 213.87715624999998, 215.90215625, 217.81578125, 219.19109375, 221.19078125, 224.24515624999998, 226.65153125, 229.36671875, 248.81346875, 252.13615625, 257.79940624999995, 271.72128124999995, 278.53878124999994, 282.07071874999997, 288.28240625, 298.58459374999995, 304.64103124999997, 326.95484375, 331.99709375, 335.04640625, 338.45515624999996, 348.54471875, 356.83709375, 365.87365624999995, 370.10084374999997, 372.10559375, 374.13059375, 376.03240625, 377.40603124999996, 379.41415625, 382.47190624999996, 384.87828125, 407.05203125, 410.37640624999995, 416.02446875, 429.92609374999995, 436.78409375, 440.30084375, 446.50071875000003, 456.81134375, 462.86271875]
    speak_A = [2.1060000000000003, 4.033124999999998, 1.6571250000000006, 0.9618749999999991, 0.48262500000001296, 0.1923749999999984, 0.5197500000000161, 0.5281875000000014, 2.9176874999999995, 2.3945625000000064, 3.5235000000000127, 3.5218124999999816, 0.8184375000000159, 1.5643124999999998, 2.004749999999973, 4.0111875000000055, 1.6503749999999968, 0.9601875000000177, 0.4775625000000048, 0.16200000000000614, 0.50456250000002, 0.5366249999999866, 2.921062500000005, 2.396250000000009, 3.526875000000018, 3.5133749999999964, 0.8116874999999482, 1.5491250000000036, 2.013187500000072, 4.023000000000025, 1.6604999999999563, 0.9652499999999691, 0.4741874999999709, 0.72393749999992, 0.49612500000000637, 0.5298749999999472, 2.914312500000051, 2.3928750000000036, 3.5251875000000155, 3.5184375000000045, 0.8218124999999645, 1.5811874999999418]

    speak_B = [6.9069375, 4.293000000000001, 2.1667500000000004, 3.0644999999999953, 1.3770000000000024, 1.6081874999999997, 4.625437500000004, 2.7236249999999984, 0.853874999999995, 1.1323124999999976, 0.3526875000000018, 0.5771250000000023, 0.421875, 0.9028125000000031, 0.2936249999999916, 0.9753749999999854, 0.5332500000000095, 5.008499999999998, 3.0476249999999823, 3.9791250000000105, 4.745249999999999, 6.616687500000012, 2.7219374999999957, 3.172499999999985, 4.679437500000006, 1.243687499999993, 6.930562500000008, 4.287937499999998, 2.141437499999995, 3.0763125000000002, 1.3921875000000057, 1.616624999999999, 4.581562500000018, 2.754000000000019, 0.8707500000000152, 1.1323124999999834, 0.35437500000000455, 0.5771249999999952, 0.4353749999999934, 0.9044999999999845, 0.2953124999999943, 0.980437500000022, 0.5568749999999909, 4.983187500000014, 3.0273750000000064, 3.9689999999999657, 4.740187499999934, 6.571124999999938, 2.718562499999962, 3.1741875000000164, 4.650750000000016, 1.2571874999999864, 6.9001875000000155, 4.289625000000001, 2.1481875000000628, 3.056062499999939, 1.3820625000000746, 1.598062499999969, 4.598437499999932, 3.7310625000000073, 1.130625000000009, 0.3560625000000073, 0.5619374999999991, 0.421875, 0.9028124999999818, 0.29362500000002, 0.9770624999999882, 4.9950000000000045, 3.039187499999912, 3.967312500000048, 4.881937499999935, 6.582937500000071, 2.71518750000007, 3.1674375000000055, 4.649062500000014, 1.2521249999999782]
    n = 300
    speaker_1_start = [0.25146875, 6.935656249999999, 13.87128125, 14.66271875, 21.73165625, 22.79478125, 29.208968749999997, 30.45434375,
     34.59715625, 47.34284375, 57.17421875, 63.12940625, 68.22059375, 73.14640625000001, 79.68209375, 82.78709375,
     89.25190624999999, 97.60671875, 110.75403125, 112.26940625, 116.68390625, 117.66096875, 122.83484375,
     128.30740624999999, 134.59671874999998, 135.59234375]
    speaker_1_end = [2.50596875, 12.92459375, 14.25940625, 20.872718749999997, 22.190656249999996, 26.809343749999996,
     29.387843750000002, 31.422968750000003, 41.11596875, 51.45528125, 59.20934375, 65.06159375000001, 69.90471875,
     78.99865625000001, 82.52384375, 84.11346875000001, 92.05146875, 99.98946874999999, 111.63321875, 115.54146875,
     117.16821875, 122.58003124999999, 127.85515625, 133.78334375, 135.05065625, 137.56840624999998]

    speaker_2_start =[3.82896875, 28.056406250000002, 29.565031249999997, 33.29946875, 43.62865625, 53.87853125, 55.198156250000004,
     59.20934375, 60.58971875, 66.34915625, 68.14465625, 71.18553125, 85.37403125, 86.74428125, 92.05146875,
     93.21078125, 96.97221875, 99.98946874999999, 105.87546875000001, 108.43371875, 138.60790624999998,
     142.33053124999998]
    speaker_2_end = [6.14421875, 29.208968749999997, 29.62746875, 34.23940625, 46.796093750000004, 54.68684375, 56.85696875,
     59.60928125, 62.46621875, 67.74134375, 68.22059375, 72.38028125, 85.85665625000001, 88.48578125, 92.37884374999999,
     96.67690625, 97.22028125, 105.21228124999999, 107.17990624999999, 109.58796874999999, 139.20865625,
     142.38621874999998]

    return render_template('index.html',labels = ovl_st, diff = diff,
                           sp_a_st = sp_a_st, sp_a_en = sp_a_en, sp_b_st = sp_b_st, sp_b_en=sp_b_en,
                           speak_A=speak_A,speak_B=speak_B, start_speaker_1 = speaker_1_start,
                           start_speaker_2 = speaker_2_start, labels1 = speaker_2_end)

